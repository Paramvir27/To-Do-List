{"version":3,"sources":["logo.svg","components/todo.js","components/Notepad.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Todo","boxDisplay","setState","box","className","type","ref","state","x","placeholder","onClick","cancelBox","insertBox","current","focus","error","a","value","trim","setTimeout","k","m","idgen","unshift","id","content","bcg","btnColor","btnValue","console","log","deleteBox","filter","y","splice","markBox","strike","href","React","createRef","this","map","Fragment","key","length","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.1dc0bb30.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, {Component} from 'react';\r\nimport './todo.css';\r\n\r\nclass Todo extends Component\r\n{\r\n    constructor()\r\n    {\r\n        super();\r\n\r\n        this.state = {\r\n            \r\n            a:[\r\n                {\r\n                    id:1,\r\n                    content:`You can add new items to the list.`,\r\n                    btnColor:\"btn-success\",\r\n                    btnValue:\"Mark\",\r\n                    bcg:\"bg-light\",\r\n                },\r\n                {\r\n                    id:2,\r\n                    content:(<><span>Check out: </span><a href = \"http://paramvir27.github.io/\">Param's Portfolio</a></>),\r\n                    btnColor:\"btn-success\",\r\n                    btnValue:\"Mark\",\r\n                    bcg:\"bg-light\",\r\n                }\r\n            ],\r\n            \r\n            box:null,\r\n            error:null,\r\n            strike:null,\r\n            idgen:2,            \r\n            x:React.createRef(),\r\n        }\r\n    }\r\n    \r\n\r\n    boxDisplay = () =>\r\n    {\r\n        this.setState({\r\n            box:(<div className=\"col-12 px-4 px-sm-5 text-center\">      \r\n            <input type = \"text\" ref={this.state.x} placeholder=\"Enter your Wish\" className=\"form-control form-control-lg\"/> \r\n            <button className = \"btn btn-danger px-5 py-2 py-md-3 mt-3 mb-5 mx-2\" \r\n            onClick = {this.cancelBox}> Cancel</button>\r\n            <button className = \"btn btn-primary px-5 py-2 py-md-3 mt-3 mb-5 mx-2\"\r\n            onClick = {this.insertBox}> Insert</button>\r\n            </div>),\r\n        },()=>{\r\n            this.state.x.current.focus();\r\n        })\r\n    }\r\n\r\n    cancelBox = () =>\r\n    {\r\n        this.setState({\r\n            box:null,\r\n            error:null,\r\n        })\r\n    }\r\n\r\n    insertBox = () =>\r\n    {\r\n        let a = this.state.x.current.value;\r\n        let b = a.trim();\r\n        if(b==\"\")\r\n        {\r\n            this.state.x.current.focus();\r\n            this.setState({\r\n                error:\"Input field is empty\",\r\n            },()=>{\r\n                setTimeout(()=>{\r\n                    this.setState({\r\n                        error:null,\r\n                    })\r\n                },4000\r\n                );\r\n            })\r\n        }\r\n        else\r\n        {\r\n            let k = this.state.a;\r\n            let m = this.state.idgen + 1;\r\n            k.unshift({\r\n                id:m,\r\n                content:a,\r\n                bcg:\"bg-light\",\r\n                btnColor:\"btn-success\",\r\n                btnValue:\"Mark\",\r\n            });\r\n            console.log(k);\r\n            this.setState({\r\n                a:k,\r\n                idgen:m,\r\n                box:null,\r\n                error:null,\r\n                \r\n            })\r\n        }       \r\n    }\r\n\r\n    deleteBox = (id) => {\r\n        let m;\r\n        let k = this.state.a;\r\n        let p = k.filter((x,y)=>{{\r\n            if(x.id==id)\r\n            {\r\n                m = y;                \r\n            }\r\n        }})\r\n        //console.log(m,k);\r\n        k.splice(m,1);\r\n        this.setState({a:k});\r\n        //console.log(k);\r\n    }\r\n\r\n    markBox = (id) => {\r\n        let k = this.state.a;\r\n        let m;\r\n        let p = k.filter((x)=>{{\r\n            if(x.id==id)\r\n            {        \r\n                if(x.btnValue == \"Mark\")       \r\n                {\r\n                    x.strike = \"cut\";\r\n                    x.bcg = \"bcg\";\r\n                    x.btnColor = \"btn-secondary\";\r\n                    x.btnValue = \"Unmark\";\r\n                }\r\n                else                \r\n                {\r\n                    x.strike = null;\r\n                    x.bcg = \"bg-light\";\r\n                    x.btnColor = \"btn-success\";\r\n                    x.btnValue = \"Mark\";\r\n                }                \r\n            }\r\n        }})\r\n       \r\n        this.setState({\r\n            a:k,\r\n        })\r\n        // console.log(k);\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n    render()\r\n    {\r\n        let k = this.state.a.map((x)=>{\r\n            return(\r\n                <React.Fragment key = {x.id}>\r\n\r\n                    <div className = \"col-12\">\r\n                        <div className={`row border p-4 mx-1 ${x.bcg}`}>                            \r\n                            <p className = {`bigFont p-2 col-12 text-justify col-md-8 col-lg-9 col-xl-10 my-auto ${x.strike}`}>{x.content}</p>\r\n                            <div className = \"col-12 col-md-4 col-lg-3 col-xl-2 d-flex align-items-start p-0 mt-1 justify-content-end\">\r\n                                <button className={`btn ${x.btnColor} ml-2`} onClick = {()=>{this.markBox(x.id)}}> {x.btnValue} </button>\r\n                                <button className=\"btn btn-danger ml-2\" onClick = {()=>{this.deleteBox(x.id)}}>Remove</button>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n           \r\n                </React.Fragment>\r\n            )    \r\n        });\r\n\r\n        if(k.length==0)\r\n        {\r\n            k = (<h1 className = \"my-5 text-secondary mx-auto pb-5 pt-4\"> No Item in List </h1>);\r\n        }\r\n\r\n        \r\n\r\n\r\n        return(<>\r\n            <div className = \"container\">\r\n                <div className = \"row pb-3 border\">\r\n\r\n                    <div className = \"col-12 p-0 mb-3\">               \r\n                        <div className=\"bg-dark text-white p-4 d-flex align-items-center\">\r\n                            <h1 className = \"my-auto font-weight-bold\">To-Do List</h1>\r\n                            <button className = \"btn ml-auto btn-warning font-weight-bold px-md-4 py-md-3\"\r\n                            onClick = {this.boxDisplay}>Add New</button>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div className=\"col-12\">\r\n                        <span className=\"d-flex font-weight-bold mb-1 text-danger justify-content-center mt-2\">{this.state.error}</span>\r\n                    </div>\r\n                    {this.state.box}\r\n\r\n                    {k}     \r\n\r\n          \r\n                </div>\r\n\r\n                <div className = \"row\">\r\n                    \r\n                    <div className=\"col-12 p-0\">\r\n                        <h5 className=\"text-secondary font-weight-light text-center\">&copy; Designed By: <a href=\"https://paramvir27.github.io/\">Paramvir Singh</a></h5>\r\n                    </div> \r\n                </div>\r\n            </div>\r\n        </>);\r\n    }\r\n}\r\n\r\nexport default Todo;","import React, {Component} from 'react';\r\n\r\nclass Notepad extends Component\r\n{\r\n  constructor()\r\n  {\r\n    super()\r\n    this.state = {\r\n      a:[\"Red\",\"Blue\",\"Green\"],\r\n      info:\"\",\r\n      warning:\"\",\r\n    }\r\n  }\r\n\r\n  input = (event) => {\r\n    this.setState({\r\n      info:event.target.value,\r\n    },() => { // callback function for LIVE checking that element is present or not\r\n      let k = this.state.a;\r\n      let h = k.indexOf(this.state.info);    \r\n      //console.log(h);\r\n      if(h!==-1)\r\n      {\r\n        this.setState({\r\n          warning:\"Element Already Present\",\r\n        })\r\n      }\r\n      else\r\n      {\r\n        this.setState({\r\n          warning:\"\",\r\n        })\r\n      }\r\n    });\r\n\r\n\r\n\r\n   \r\n\r\n    //event.preventDefault();\r\n  }\r\n\r\n  store = () => {\r\n    let k = this.state.a;\r\n    let h = k.indexOf(this.state.info);\r\n    \r\n    // Returns -1 if element not found\r\n    if(h!==-1)\r\n    {\r\n      alert(\"Element Already Present\");\r\n    }\r\n    else\r\n    {\r\n      if(this.state.info.length>0)\r\n        k.push(this.state.info);\r\n      else\r\n        alert(\"Please Enter Something\");\r\n      this.setState({\r\n        a:k,\r\n        info:'',\r\n      })\r\n    }\r\n  }\r\n\r\n  remove = (event) => {\r\n    let i = event.target.id;\r\n    let k = this.state.a;\r\n    k.splice(i,1);\r\n    this.setState({\r\n      a:k,\r\n    })\r\n  }\r\n  render()\r\n  {\r\n    let k = \"\";\r\n    if(this.state.a.length==0)\r\n    {\r\n      k = (<h1 className=\"text-secondary text-center mt-5\">No Items in List</h1>);\r\n    }\r\n    else\r\n    {\r\n      k = this.state.a.map( (x,y) => {\r\n        return(<React.Fragment key = {y}>\r\n                <h1 className = \"bg-dark text-light p-3 d-flex justify-content-between\"> {x} \r\n                <button id = {y} className = \"btn btn-danger\" onClick = {this.remove}> Remove </button> </h1> \r\n                </React.Fragment>\r\n                )   \r\n        });\r\n    }\r\n\r\n    return(<>    \r\n      {k}    \r\n      <h5 className = \"text-center text-danger mt-5\">{this.state.warning}</h5>\r\n      <div className = \"mt-3 p-4\">\r\n        <input type=\"text\" value = {this.state.info} onChange = {this.input} placeholder = \"Enter INFO\" className=\"form-control\"/>\r\n        <button className = \"btn btn-primary ml-auto d-block mt-3\" onClick = {this.store}>Insert</button>\r\n      </div>\r\n    \r\n    </>);\r\n  }\r\n}\r\n\r\nexport default Notepad;","import React from 'react';\nimport logo from './logo.svg';\nimport Todo from './components/todo.js';\nimport Notepad from './components/Notepad.js';\n\nimport './App.css';\n\nfunction App() {\n  return (\n    <div>\n      <Todo></Todo>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}